(defun slice (foo)
  (let ((i 0)(l (list 'list)))
    (loop
      (when (>= i (length foo))(return))
      (setf l (concatenate 'list l (list (string (char foo i)))))
      (setf i (+ i 1))
    )
    (pop l)
    l
  )
)

(defun get-byte (foo)
  (let ((arr nil)(fin (list 0 0 0))
        (dex 0)(findex 0)
        (nums (list 128 64 32 16 8 4 2 1))
        (numdex 0))
    (setf arr (slice foo))
    (loop
      (when (>= dex (length arr))(return))
      (when (equal "X" (elt arr dex))(setf (elt fin findex) (+ (elt fin findex) (elt nums numdex))))
      (incf dex)
      (incf numdex)
      (when (= (mod dex 8) 0)
        (incf findex)
        (setf numdex 0)
      )
    )
    fin
  )
)

(defun addwith-right ()
  (compile-fc code-string (+ i 1))
  (format o " clc~%")
  (format o " adc ")
  (setf didright 1)
  (if (not (= oldi 0))
    (progn
      (setf newi i)
      (compile-fc code-string oldi)
      (setf i newi)
    )
    (compile-fc code-string i)
  )
  (format o "~% sta $CFFF~%")
)

(defun subwith-right ()
  (compile-fc code-string (+ i 1))
  (format o " sec~%")
  (format o " sbc ")
  (setf didright 1)
  (if (not (= oldi 0))
    (progn
      (setf newi i)
      (compile-fc code-string oldi)
      (setf i newi)
    )
    (compile-fc code-string i)
  )
  (format o "~% sta $CFFF~%")
)

(defun compile-progn ()
  (let ((e i) (stop-point 0) (b-match 0))
    (setf e i)
    (setf b-match 1)
    (loop
      (when (>= 0 b-match)(return))
      (when (equal "(" (elt code-string e))
        (incf b-match)
      )
      (when (equal ")" (elt code-string e))
        (setf b-match (- b-match 1))
      )
      (setf stop-point e)
      (incf e)
    )
    (incf i)
    (loop
      (if (>= i stop-point)
        (return)
        (compile-fc code-string i)
      )
    )
  )
)

(defun addwith-nums ()
  (format o " lda ")
  (compile-fc code-string (+ i 1))
  (format o "~% clc~%")
  (format o " adc ")
  (compile-fc code-string i)
  (format o "~% sta $CFFF~%")
  (setf didright 0)
)

(defun subwith-nums ()
  (format o " lda ")
  (compile-fc code-string (+ i 1))
  (format o "~% sec~%")
  (format o " sbc ")
  (compile-fc code-string i)
  (format o "~% sta $CFFF~%")
  (setf didright 0)
)

(defun find-in-list (foo bar)
  (let ((i 0)(return nil))
    (loop
      (when (>= i (length bar))(return))
      (when (equal foo (elt bar i))(setf return (elt bar (+ i 1)))(return))
      (incf i)
    )
    return
  )
)

(defun number-or-var (foo)
  (let ((return nil))
    (when (find-in-list foo var-list)
      (setf return (find-in-list foo var-list))
      (setf return (format nil "$~x" return))
    )
    (when (parse-integer foo :junk-allowed t)
      (setf return (concatenate 'string "#" foo))
    )
    return
  )
)

(defun in-list (the-thing the-list)
  (let ((x 0) (found nil))
    (loop
      (when (>= x (length the-list))(return))
      (when (equalp the-thing (elt the-list x))
        (setf found t)
      )
      (incf x)
    )
    found
  )
)